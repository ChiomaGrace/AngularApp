"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTurboRoot = exports.getPathsDownTo = exports.getAbsoluteEnvPath = exports.isSubfolder = void 0;
const fs = require("fs");
const path = require("path");
const findUp = require("find-up");
const node_fs_1 = require("node:fs");
function isSubfolder(parent, child) {
    return path.relative(parent, child).startsWith("..");
}
exports.isSubfolder = isSubfolder;
function getAbsoluteEnvPath(envPath, cwd) {
    const _envPath = path.isAbsolute(envPath)
        ? envPath
        : path.resolve(cwd, envPath);
    return fs.existsSync(_envPath)
        ? fs.lstatSync(_envPath).isDirectory()
            ? _envPath
            : path.dirname(_envPath)
        : cwd;
}
exports.getAbsoluteEnvPath = getAbsoluteEnvPath;
function getPathsDownTo(envPath, destination) {
    let currentPath = destination;
    const paths = [currentPath];
    while (currentPath !== envPath && currentPath !== "/") {
        currentPath = path.dirname(currentPath);
        paths.push(currentPath);
    }
    return paths;
}
exports.getPathsDownTo = getPathsDownTo;
/**
 * Return root `turbo.json` file path if found, else return original input.
 *
 * @param turboPath existing turbo.json file path.
 * @throws {Error} if `turboPath` is not exist.
 */
function getTurboRoot(turboPath) {
    // test if file content has `"extends": ["//"]`
    const isSubProject = (0, node_fs_1.readFileSync)(turboPath, "utf8").includes('"extends"');
    if (isSubProject) {
        const parent = path.dirname(path.dirname(turboPath));
        const rootPath = findUp.sync("turbo.json", { cwd: parent });
        if (rootPath)
            return rootPath;
    }
    return turboPath;
}
exports.getTurboRoot = getTurboRoot;
//# sourceMappingURL=utils.js.map