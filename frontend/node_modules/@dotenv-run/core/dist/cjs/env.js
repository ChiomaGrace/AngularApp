"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.expand = exports.rootExpand = exports.paths = exports.filter = void 0;
const dotenv_1 = require("dotenv");
const utils_js_1 = require("./utils.js");
const dotenv_expand_1 = require("dotenv-expand");
const fs = require("fs");
const path = require("path");
const findUp = require("find-up");
function buildEnvFiles(environment, envPath) {
    return [
        environment !== "test" && `${envPath}.${environment}.local`,
        // Don't include `.env.local` for `test` environment
        // since normally you expect tests to produce the same
        // results for everyone
        environment && `${envPath}.${environment}`,
        environment !== "test" && `${envPath}.local`,
        envPath, // .env
    ].filter(Boolean);
}
function filter(env, prefix) {
    return Object.keys(env)
        .filter((key) => prefix.test(key))
        .sort() // sort keys to make output more deterministic
        .reduce((env, key) => {
        env[key] = process.env[key];
        return env;
    }, {});
}
exports.filter = filter;
function paths(environment, root, cwd = process.cwd()) {
    const _root = (0, utils_js_1.getAbsoluteEnvPath)(root, cwd); // resolved path to .env file
    let envPaths = [];
    if ((0, utils_js_1.isSubfolder)(_root, cwd)) {
        envPaths = [_root];
    }
    else {
        envPaths = (0, utils_js_1.getPathsDownTo)(_root, cwd);
    }
    return envPaths
        .map((envPath) => path.join(envPath, ".env"))
        .flatMap((envPath) => buildEnvFiles(environment, envPath))
        .filter((envPath) => fs.existsSync(envPath));
}
exports.paths = paths;
function rootExpand(root, environment) {
    if (!root) {
        let p = findUp.sync([
            "turbo.json",
            "nx.json",
            "lerna.json",
            "pnpm-workspace.yaml",
        ]);
        if (p && p.endsWith("turbo.json")) {
            p = (0, utils_js_1.getTurboRoot)(p);
        }
        if (!p)
            p = findUp.sync(["package.json"]);
        root = p ? path.dirname(p) : process.cwd();
    }
    const _paths = paths(environment || process.env.NODE_ENV, root);
    expand(_paths);
    return _paths;
}
exports.rootExpand = rootExpand;
function expand(envPaths) {
    envPaths.forEach((dotenvFile) => {
        (0, dotenv_expand_1.expand)((0, dotenv_1.config)({
            path: dotenvFile,
        }));
    });
}
exports.expand = expand;
//# sourceMappingURL=env.js.map